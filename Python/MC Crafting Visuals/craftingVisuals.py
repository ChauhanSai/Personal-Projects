import base64
from json import load
from math import ceil
from os.path import exists, isfile, join
from PIL import Image, ImageOps
from os import listdir

uiData = "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dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIKICAgIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiCiAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICB4bWxuczpHSU1QPSJodHRwOi8vd3d3LmdpbXAub3JnL3htcC8iCiAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIKICAgeG1wTU06RG9jdW1lbnRJRD0iZ2ltcDpkb2NpZDpnaW1wOjljZTUyYzIzLWJmNWQtNGRmZS04OTMxLTI4MGQ5MTMzOWIyNSIKICAgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpiMzA5Y2FiNS0wMmM1LTRmMDItOGE4Ni03OGUyODRmZmU4OTgiCiAgIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo3ZjA2NmZiMi0yMDk0LTQwNmItYmQ1ZC0yYmJiYmM5MzI0ODEiCiAgIGRjOkZvcm1hdD0iaW1hZ2UvcG5nIgogICBHSU1QOkFQST0iMi4wIgogICBHSU1QOlBsYXRmb3JtPSJXaW5kb3dzIgogICBHSU1QOlRpbWVTdGFtcD0iMTY0NjQzNjQ3NjIzNTA0MiIKICAgR0lNUDpWZXJzaW9uPSIyLjEwLjI4IgogICB0aWZmOk9yaWVudGF0aW9uPSIxIgogICB4bXA6Q3JlYXRvclRvb2w9IkdJTVAgMi4xMCI+CiAgIDx4bXBNTTpIaXN0b3J5PgogICAgPHJkZjpTZXE+CiAgICAgPHJkZjpsaQogICAgICBzdEV2dDphY3Rpb249InNhdmVkIgogICAgICBzdEV2dDpjaGFuZ2VkPSIvIgogICAgICBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjhiNzMwMzY1LWI1ZjUtNGU2MC1hMzdiLWQzZTVmN2FhNzNkZSIKICAgICAgc3RFdnQ6c29mdHdhcmVBZ2VudD0iR2ltcCAyLjEwIChXaW5kb3dzKSIKICAgICAgc3RFdnQ6d2hlbj0iMjAyMi0wMy0wNFQxNzoyNzo1NiIvPgogICAgPC9yZGY6U2VxPgogICA8L3htcE1NOkhpc3Rvcnk+CiAgPC9yZGY6RGVzY3JpcHRpb24+CiA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgCjw/eHBhY2tldCBlbmQ9InciPz6EQyxwAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH5gMEFxs4XFZ5SQAAENJJREFUeNrt3c1t2+oWQFHpgSWlga8HpgpP2YRrsXpgA2FNfIMAFwiuL+W/2N7SWlMSdnRyoMHGAXw+fYz9BAAAAPC889/+Bf8zYwAAAKBO4AAAAADyBA4AAAAgT+AAAAAA8gQOAAAAIE/gAAAAAPIEDgAAACDvJX+Hdr/6wr6bJAAAAPCs8/lqfji/93e44AAAAADyBA4AAAAgT+AAAAAA8gQOAAAAIE/gAAAAAPIEDgAAACBP4AAAAADyBA4AAAAg73w6nfajF/Z9NyUAAADgzbZtO3z+48ePl/yY89FDFxwAAABAnsABAAAA5AkcAAAAQJ7AAQAAAOQJHAAAAECewAEAAADkCRwAAABA3vl0Ou1HL+z7/tf/Edf+Hi4AAADQ9fj4+O6f8fT0dPjcBQcAAACQJ3AAAAAAeQIHAAAAkCdwAAAAAHkCBwAAAJAncAAAAAB5AgcAAACQN33G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"
uiData = base64.b64decode(uiData)
uiFile = open("ui.png", "wb")
uiFile.write(uiData)
uiFile.close()

replace = {}
recipesDir = "recipes"
recipes = [f for f in listdir(recipesDir) if isfile(join(recipesDir, f))]
for recipe in range(len(recipes)):
    craft = 'recipes/' + recipes[recipe]
    print("Reading " + recipes[recipe])
    # Clean file of comments
    file = open(craft, 'r')
    lines = file.readlines()
    file = open(craft, 'w')
    for line in lines:
        if '//' not in line.strip("\n"):
            file.write(line)
        else:
            file.write(line[:line.index('//')] + '\n')

    # Load JSON
    file = open(craft)
    data = load(file)

    try:
        name = data["minecraft:recipe_shapeless"]["description"]["identifier"]
        craftType = 1  # Shapeless
    except KeyError:
        name = data["minecraft:recipe_shaped"]["description"]["identifier"]
        craftType = 0  # Shaped

    # Create file
    name = name[name.index(':') + 1:] + ".png"
    Image.open('ui.png').save(name)
    image = Image.open(name)


    def place(texture, loc):
        """
        Creates a repeating event Tuesdays at 5-6pm starting after exclude
        ex. debate(upcomingMeeting)
        :param texture: file name
        :type texture: basestring
        :param loc: grid location, 9 for result
        :type loc: int
        """
        grid = ["74, 74", "222, 74", "372, 74",
                "74, 222", "222, 222", "372, 222",
                "74, 372", "222, 372", "372, 372",
                "848, 214"]
        paste = Image.open("textures/" + texture)
        width, height = paste.size
        if width != height:
            resize = ceil((height - width) / 2)
            paste = ImageOps.expand(paste, resize, (0, 0, 0, 0))
            paste = paste.crop((0, resize, height, height + resize))
        if loc == 9:
            newSize = eval("133, 133")
        else:
            newSize = eval("117, 117")
        paste = paste.resize(newSize, Image.NEAREST)
        image.paste(paste, eval(grid[loc]), paste)


    if craftType:
        # Shapeless
        arr = []
        # Get ingredients in order
        for i in range(len(data["minecraft:recipe_shapeless"]["ingredients"])):
            item = data["minecraft:recipe_shapeless"]["ingredients"][i]['item']
            item = item[item.index(':') + 1:]
            if exists("textures\\" + item + ".png"):
                arr.append(item + ".png")
            else:
                try:
                    arr.append(replace[item])
                    print("Retrieved "+replace[item])
                except KeyError:
                    temp = input(item + " not found, enter alternative: ") + ".png"
                    arr.append(temp)
                    replace[item] = temp
        # Get result
        result = data["minecraft:recipe_shapeless"]["result"][0]["item"]
        result = result[result.index(':') + 1:]
        if exists("textures\\" + result + ".png"):
            arr.append(result + ".png")
        else:
            try:
                arr.append(replace[item])
                print("Retrieved "+replace[item])
            except KeyError:
                temp = input(item + " not found, enter alternative: ") + ".png"
                arr.append(temp)
                replace[item] = temp

    else:
        # Shaped
        # Get item with key
        items = {}
        for i in range(len(data["minecraft:recipe_shaped"]["key"])):
            char = list(data["minecraft:recipe_shaped"]["key"].keys())[i]
            item = data["minecraft:recipe_shaped"]["key"][char]["item"]
            item = item[item.index(':') + 1:]
            if exists("textures\\" + item + ".png"):
                items[char] = item + ".png"
            else:
                try:
                    items[char] = replace[item]
                    print("Retrieved "+replace[item])
                except KeyError:
                    temp = input(item + " not found, enter alternative: ") + ".png"
                    items[char] = temp
                    replace[item] = temp
        # Place items in pattern order
        arr = []
        for i in range(len(data["minecraft:recipe_shaped"]["pattern"])):
            string = data["minecraft:recipe_shaped"]["pattern"][i]
            for j in range(len(string)):
                arr.append(items[string[j:j + 1]])
        # Get result
        result = data["minecraft:recipe_shaped"]["result"][0]["item"]
        result = result[result.index(':') + 1:]
        if exists("textures\\" + result + ".png"):
            arr.append(result + ".png")
        else:
            try:
                arr.append(replace[item])
                print("Retrieved "+replace[item])
            except KeyError:
                temp = input(item + " not found, enter alternative: ") + ".png"
                arr.append(temp)
                replace[item] = temp

    # Create image
    for i in range(len(arr) - 1):
        place(arr[i], i)
    place(arr[len(arr) - 1], 9)
    image.save(name)
    print("Saved " + name + "\n")
